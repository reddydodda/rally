{% set flavor_name = flavor_name or "m1.medium" %}
{% set volume_type = volume_type or " " %}
{% set times = times or 1 %}
{% set concurrency = concurrency or 1 %}
{% set tenants = tenants or 1 %}
{% set users = users or 1 %}
{% set glance_image_url = glance_image_url or "http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img" %}
{% set glance_image_name = glance_image_name or "cirros" %}
{% set sla_max_rate = sla_max_rate or 0 %}
---
# Token Validation
  Authenticate.keystone:
    -
      args:
        service_type: "Rally_test_type"
        description: "test_description"
        repetitions: 2
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  Authenticate.validate_ceilometer:
    -
      args:
        repetitions: 2
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  Authenticate.validate_cinder:
    -
      args:
        repetitions: 2
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  Authenticate.validate_glance:
    -
      args:
        repetitions: 2
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  Authenticate.validate_heat:
    -
      args:
        repetitions: 2
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  Authenticate.validate_neutron:
    -
      args:
        repetitions: 2
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  Authenticate.validate_nova:
    -
      args:
        repetitions: 2
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}
# Keystone Test Cases
# Starts Here
  KeystoneBasic.create_delete_user:
    -
      args: {}
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  KeystoneBasic.authenticate_user_and_validate_token:
    -
      args: {}
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  KeystoneBasic.create_and_delete_service:
    -
      args:
        service_type: "Rally_test_type"
        description: "test_description"
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  KeystoneBasic.create_update_and_delete_tenant:
    -
      args: {}
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}
 # Glance Test Cases
 # Starts Here
  GlanceImages.create_and_delete_image:
    -
      args:
        image_location: "{{glance_image_url}}"
        container_format: "bare"
        disk_format: "qcow2"
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  GlanceImages.create_and_update_image:
    -
      args:
        image_location: "{{glance_image_url}}"
        container_format: "bare"
        disk_format: "qcow2"
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
        api_versions:
          glance:
            version: 2
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  GlanceImages.create_and_get_image:
    -
      args:
        image_location: "{{glance_image_url}}"
        container_format: "bare"
        disk_format: "qcow2"
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}
 # Volume Test Cases
 # Starts Here
  CinderVolumes.create_and_delete_volume:
    -
      args:
        size:
          min: 1
          max: 5
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  CinderVolumes.create_and_delete_snapshot:
    -
      args:
          force: false
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
        volumes:
          size: 1
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  CinderVolumes.create_volume_from_snapshot:
    -
      args:
          do_delete: true
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
        volumes:
          size: 1
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  CinderVolumes.create_volume_and_clone:
    -
      args:
        size:
          min: 1
          max: 5
        nested_level: 3
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  CinderVolumes.create_and_list_volume:
    -
      args:
        size:
          min: 1
          max: 5
        detailed: True
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}
  # Nova Test Cases
  # Starts Here
  NovaServers.boot_and_delete_server:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{glance_image_name}}"
        force_delete: false
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{glance_image_name}}"
        auto_assign_nic: true
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
        network:
          start_cidr: "10.2.0.0/24"
          networks_per_tenant: 2
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  NovaServers.boot_and_list_server:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{glance_image_name}}"
        detailed: True
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}

      sla:
        failure_rate:
          max: {{sla_max_rate}}

  NovaServers.boot_and_live_migrate_server:
    - args:
        flavor:
          name: "{{flavor_name}}"
        image:
          name: "{{glance_image_name}}"
        block_migration: false
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  NovaServers.boot_and_rebuild_server:
    - args:
        flavor:
          name: "{{flavor_name}}"
        from_image:
          name: "{{glance_image_name}}"
        to_image:
          name: "{{glance_image_name}}"
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  NovaServers.boot_server_from_volume_and_delete:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{glance_image_name}}"
        volume_size: 10
        volume_type: "{{volume_type}}"
        force_delete: false
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  NovaServers.boot_server_from_volume_and_resize:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{glance_image_name}}"
        to_flavor:
            name: "m1.small"
        confirm: true
        volume_size: 1
        force_delete: false
        do_delete: true
        boot_server_kwargs: {}
        create_volume_kwargs: {}
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  NovaServers.boot_server_and_attach_interface:
    -
      args:
        flavor:
            name: "{{flavor_name}}"
        image:
            name: "{{glance_image_name}}"
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        boot_server_args: {}
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        network: {}
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
        quotas:
          neutron:
            network: -1
            subnet: -1
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  NovaFlavors.create_and_delete_flavor:
    -
      runner:
        type: "constant"
        concurrency: {{concurrency}}
        times: {{times}}
      args:
        ram: 500
        vcpus : 1
        disk: 1
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  NovaKeypair.create_and_delete_keypair:
    -
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}


  NovaHypervisors.list_and_get_hypervisors:
    -
      args:
        detailed: True
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  NovaHosts.list_and_get_hosts:
    -
      runner:
        type: "constant"
        concurrency: {{concurrency}}
        times: {{times}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
      sla:
        failure_rate:
          max: {{sla_max_rate}}
 # Neutron Test Cases
 # Starts Here
  NeutronNetworks.create_and_delete_networks:
    -
      args:
        network_create_args: {}
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
        quotas:
          neutron:
            network: -1
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  NeutronNetworks.create_and_delete_ports:
    -
      args:
        network_create_args: {}
        port_create_args: {}
        ports_per_network: 10
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        network: {}
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
        quotas:
          neutron:
            network: -1
            port: -1
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  NeutronSecurityGroup.create_and_delete_security_groups:
    -
      args:
        security_group_create_args: {}
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
        quotas:
          neutron:
            security_group: -1
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  NeutronNetworks.create_and_delete_subnets:
    -
      args:
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnets_per_network: 2
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        network: {}
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
        quotas:
          neutron:
            network: -1
            subnet: -1
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  NeutronNetworks.create_and_update_networks:
    -
      args:
        network_create_args: {}
        network_update_args:
            admin_state_up: False
            name: "_updated"
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
        quotas:
          neutron:
            network: -1
      sla:
        failure_rate:
          max: {{sla_max_rate}}

  NeutronNetworks.create_and_update_subnets:
    -
      args:
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.4.0.0/16"
        subnets_per_network: 2
        subnet_update_args:
            enable_dhcp: False
            name: "_subnet_updated"
      runner:
        type: "constant"
        times: {{times}}
        concurrency: {{concurrency}}
      context:
        network: {}
        users:
          tenants: {{tenants}}
          users_per_tenant: {{users}}
        quotas:
          neutron:
            network: -1
            subnet: -1
      sla:
        failure_rate:
          max: {{sla_max_rate}}
# End of the File
